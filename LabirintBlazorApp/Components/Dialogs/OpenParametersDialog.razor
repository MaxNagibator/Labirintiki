@using Blazored.LocalStorage
@inject ISnackbar SnackbarService
@inject ILocalStorageService LocalStorage

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            Параметры
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudStack Spacing="2">
            <MudSwitch @bind-Value="@Parameters.Labyrinth.IsSoundOn" Color="Color.Success" Label="Звук" UncheckedColor="Color.Error" />
            <MudStack>
                <MudText>Цвет лабиринта</MudText>
                <MudColorPicker @bind-Text="@Parameters.Labyrinth.Color"
                                ColorPickerMode="ColorPickerMode.HEX"
                                PickerVariant="PickerVariant.Static"
                                Rounded="true"
                                ShowAlpha="true"
                                ShowColorField="true"
                                ShowInputs="true"
                                ShowModeSwitch="true"
                                ShowPreview="true"
                                ShowSliders="true"
                                ShowToolbar="true" />
            </MudStack>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отмена</MudButton>
        <MudButton Color="Color.Warning" Disabled="@_processing" OnClick="Reset">Сбросить</MudButton>
        <MudButton Color="Color.Success" Disabled="@_processing" OnClick="Update">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
            }
            else
            {
                <MudText Typo="Typo.button">Сохранить</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    public required MudDialogInstance MudDialog { get; set; }

    private bool _processing;

    private async Task Update()
    {
        _processing = true;

        try
        {
            await LocalStorage.SetItemAsync(LabyrinthParameters.LocalStorageKey, Parameters.Labyrinth);
            SnackbarService.Add("Сохранено! Применится с следующей генерации", Severity.Success);
            MudDialog.Close();
        }
        catch
        {
            SnackbarService.Add("Не удалось сохранить", Severity.Error);
        }

        _processing = false;
    }

    private void Reset()
    {
        Parameters.Labyrinth = new LabyrinthParameters();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

}
