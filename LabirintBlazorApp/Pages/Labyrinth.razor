@page "/labirint" 

<PageTitle>Лабиринт</PageTitle>
<MudStack Spacing="3">
    <MudText Typo="Typo.h4">Лабиринт!</MudText>
    <div class="key-interceptor" @onkeydown="OnKeyDown" @ref="_keyInterceptorRef" tabindex="0">
        @if (_isInit == false)
        {
            <MudStack AlignItems="AlignItems.Center" Row>
                <MudProgressCircular Indeterminate />
                <MudText Typo="Typo.body1">Загрузка..</MudText>
            </MudStack>
        }
        else
        {
            <div class="field">
                @{
                    var boxSize = 370 / _originalSizeDisplay;
                    var wallWidth = Math.Max(1, boxSize / 10 * 2);
                    var shift = boxSize - wallWidth * 2;

                    for (int i = 1; i < _labSize - 1; i += 2)
                    {
                        for (int j = 1; j < _labSize - 1; j += 2)
                        {
                            if (lab[i, j - 1] == 0)
                            {
                                <DrawLine Width="@(wallWidth)"
                                          X1="@(j * boxSize - boxSize)"
                                          X2="@(j * boxSize - boxSize)"
                                          Y1="@(i * boxSize - boxSize)"
                                          Y2="@(i * boxSize + boxSize)" />
                            } //leftborder

                            if (lab[i - 1, j] == 0)
                            {
                                <DrawLine Width="@(wallWidth)"
                                          X1="@(j * boxSize - boxSize)"
                                          X2="@(j * boxSize + boxSize)"
                                          Y1="@(i * boxSize - boxSize)"
                                          Y2="@(i * boxSize - boxSize)" />
                            } //upborder

                            if (i == _labSize - 2 || j == _labSize - 2)
                            {
                                if (lab[i, j + 1] == 0)
                                {
                                    <DrawLine Width="@(wallWidth)"
                                              X1="@(j * boxSize + boxSize)"
                                              X2="@(j * boxSize + boxSize)"
                                              Y1="@(i * boxSize - boxSize)"
                                              Y2="@(i * boxSize + boxSize)" />
                                } //rightborder

                                if (lab[i + 1, j] == 0)
                                {
                                    <DrawLine Width="@(wallWidth)"
                                              X1="@(j * boxSize - boxSize)"
                                              X2="@(j * boxSize + boxSize)"
                                              Y1="@(i * boxSize + boxSize)"
                                              Y2="@(i * boxSize + boxSize)" />
                                } //downborder
                            }


                            if (_sand[i, j] == 0)
                            {
                                var top = (i) * boxSize - wallWidth;
                                var left = (j - 1) * boxSize + shift - wallWidth;
                                <div style="position:absolute;
                                                                left: @(left)px;
                                                                top: @(top)px;
                                                                width: @(boxSize)px;
                                                                height: @(boxSize)px;">
                                    <img src="/images/sand.png" style="width: @(boxSize)px; height: @(boxSize)px;" />
                                </div>
                            }
                        }
                    }

                    var myTop = (_myPositionX - 1) * boxSize + (shift * 2 / 3 + wallWidth);
                    var myLeft = (_myPositionY - 1) * boxSize + (shift / 2 + wallWidth);
                    <div style="position:absolute;
                                                        left: @(myTop)px;
                                                        top: @(myLeft)px;
                                                    width: @(boxSize)px;
                                                    height: @(boxSize)px;">
                        <img src="/images/runner.png" style="width: @(boxSize)px; height: @(boxSize)px;" />
                    </div>
                }
            </div>

            <div style="position: absolute; right: 20px; width: 250px;">
                <MudStack Spacing="3">
                    <MudText Typo="Typo.h6">Очки: @_score</MudText>
                    <MudDivider Class="my-2" Style="height:2px" DividerType="DividerType.FullWidth" />
                    <MudText Typo="Typo.h5">Параметры:</MudText>
                    <MudStack>
                        <MudNumericField Label="Размер" Min="@_minSize" Max="@_maxSize" DebounceInterval="300" Value="@_originalSize" HelperText="Попробуй тут шифт + колесо мыши" />
                        <MudSlider @bind-Value="_originalSize" Min="@_minSize" Max="@_maxSize" Color="Color.Info" Size="Size.Medium" />
                    </MudStack> 
                    <MudButton OnClick="Generate" Variant="Variant.Outlined" Color="Color.Info" FullWidth>Генерировать</MudButton>
                </MudStack>
            </div>
        }
    </div>
</MudStack> 
@code {
    const string MoveUpKey = "ArrowUp";
    const string MoveDownKey = "ArrowDown";
    const string MoveLeftKey = "ArrowLeft";
    const string MoveRightKey = "ArrowRight";

    private int _minSize = 1;
    private int _maxSize = 100;

    private int _myPositionX;
    private int _myPositionY;

    private ElementReference _keyInterceptorRef;
    private bool _isInit;

    private int _originalSize;
    private int _originalSizeDisplay;
    private int _labSize;

    private int[,] lab;
    private int[,] lab2;
    private int[,] _sand;
    private bool _exitNotFound;
    private int _exitBoxPostionX;
    private int _exitBoxPostionY;
    private int _score = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _keyInterceptorRef.FocusAsync();
            _originalSize = 16; 
            await Generate();
            StateHasChanged();
        }
    }
    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (_exitNotFound)
        {
            // if (e.KeyCode == Keys.A && Global.molot > 0)
            // {
            //     Global.ataka = true;
            //     Global.molot--;
            //     textmolot.Text = Convert.ToString(Global.molot);
            // }
            // Graphics g = this.CreateGraphics();
            // Pen p = new Pen(BackColor, Global.step / 5);
            // if (e.KeyCode == Keys.B && Global.bomba > 0)
            // {
            //     if (_myPositionX != Global.size * 2 - 1)
            //     {
            //         Global.lab[_myPositionX + 1, _myPositionY] = 1;
            //     }
            //     if (_myPositionX != 1)
            //     {
            //         Global.lab[_myPositionX - 1, _myPositionY] = 1;
            //     }
            //     if (_myPositionY != 1)
            //     {
            //         Global.lab[_myPositionX, _myPositionY - 1] = 1;
            //     }
            //     if (_myPositionY != Global.size * 2 - 1)
            //     {
            //         Global.lab[_myPositionX, _myPositionY + 1] = 1;
            //     }
            //     clear();
            //     Global.bomba--;
            //     textbomb.Text = Convert.ToString(Global.bomba);
            //     Global.ataka = false;
            // }
            // if (Global.ataka && e.KeyCode != Keys.A)
            // {
            //     if (e.KeyCode == Keys.Down && _myPositionX != Global.size * 2 - 1)
            //     {
            //         Global.lab[_myPositionX + 1, _myPositionY] = 1;
            //     }
            //     if (e.KeyCode == Keys.Up && _myPositionX != 1)
            //     {
            //         Global.lab[_myPositionX - 1, _myPositionY] = 1;
            //     }
            //     if (e.KeyCode == Keys.Left && _myPositionY != 1)
            //     {
            //         Global.lab[_myPositionX, _myPositionY - 1] = 1;
            //     }
            //     if (e.KeyCode == Keys.Right && _myPositionY != Global.size * 2 - 1)
            //     {
            //         Global.lab[_myPositionX, _myPositionY + 1] = 1;
            //     }
            //     clear();
            //     Global.ataka = false;
            // }
            if (true) //!Global.ataka)
            {
                switch (e.Key)
                {
                    case MoveUpKey:
                        Move(0, -1);
                        break;

                    case MoveDownKey:
                        Move(0, 1);
                        break;

                    case MoveLeftKey:
                        Move(-1, 0);
                        break;

                    case MoveRightKey:
                        Move(1, 0);
                        break;
                }
            }
        }
    }

    private void Move(int xOffset, int yOffset)
    {
        if (lab[_myPositionY + yOffset, _myPositionX + xOffset] == 0)
            return;

        _myPositionX += xOffset * 2;
        _myPositionY += yOffset * 2;

        if (_myPositionX == _exitBoxPostionX && _myPositionY == _exitBoxPostionY)
        {
            _exitNotFound = false;
        }
        else
        {
            if (_sand[_myPositionY, _myPositionX] == 0)
            {
                _sand[_myPositionY, _myPositionX] = 1;
                _score += 100;
            }
        }
    }

    private async Task Generate()
    {
        //todo Костыль чтоб цвет обновлялся, надо больше времени подумать. 
        // (Не перерисовывает если стена осталась на прежнем месте)
        // Но в принципе то работает))))))
        _labSize = 0;
        StateHasChanged();
        await Task.Delay(1);
         
        _myPositionX = 1;
        _myPositionY = 1;
        _exitNotFound = true;
        if (_originalSize < 1)
        {
            _originalSize = 1;
        }
        else if (_originalSize > 100)
        {
            _originalSize = 100;
        }
        _originalSizeDisplay = _originalSize;

        var density = 3;

        int n = _originalSize * 2 + 1;
        lab = new int[n, n];
        _labSize = n;

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (i == 0 || i == n - 1)
                {
                    lab[i, j] = 0;
                }

                if (j == 0 || j == n - 1)
                {
                    lab[i, j] = 0;
                }

                if (i % 2 == 1 && j % 2 == 1)
                {
                    lab[i, j] = 2;
                }

                if (i > 0 && i % 2 == 0 && i < n - 1 && j > 0 && j % 2 == 1 && j < n - 1 ||
                    i > 0 && i % 2 == 1 && i < n - 1 && j > 0 && j % 2 == 0 && j < n - 1)
                {
                    lab[i, j] = Random.Shared.Next(0, density);
                }
            }

            _exitBoxPostionX = n / 2 - (_originalSize % 2 == 0 ? 1 : 0);
            _exitBoxPostionY = n;
            lab[_exitBoxPostionY - 1, _exitBoxPostionX] = 1;
        }

        lab2 = new int[n, n];

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                lab2[i, j] = 1;
            }
        }

        _sand = lab2;

        for (int i = 1; i < _labSize; i++)
        {
            _sand[Random.Shared.Next(1, n / 2 + 1) * 2 - 1, Random.Shared.Next(1, n / 2 + 1) * 2 - 1] = 0;
        } 
        _isInit = true;
    }

}